@model IEnumerable<BookExchangePlatform.Models.Book>

@{
    ViewData["Title"] = "Index";
}

@section title {
    <h3>Books</h3>
    <a asp-action="Create" style="font-size:16px">Add New Book</a>
    <hr />
}

<!-- Search Bar -->
<div class="row">
    <div class="col-6">
        <input type="text" id="searchBar" class="form-control mb-3" placeholder="Search by Title, Author, Genre, Condition, or Availability" onkeyup="filterBooks()" />
    </div>
    <div class="col-2">
        <input type="checkbox" id="userFilterCheckbox" onchange="filterBooks()" />
        <label for="userFilterCheckbox">Show only My Books</label>
    </div>
    <div class="col-3">
        <input type="checkbox" id="userFilterCheckbox1" onchange="filterBooks()" />
        <label for="userFilterCheckbox1">Show Other Then My Books</label>
    </div>
</div>
<table id="booksTable" class="table table-striped table-bordered">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Title)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Author)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Genre)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Condition)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.IsAvailable)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Owner)
            </th>
            <th class="visually-hidden">
                @Html.DisplayNameFor(model => model.OwnerId)
            </th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model) {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Title)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Author)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Genre)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Condition)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.IsAvailable)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Owner.FullName)
                </td>
                <td class="visually-hidden" >
                    @Html.DisplayFor(modelItem => item.Owner.Id)
                </td>
                <td>
                    <ul>
                        <li><a asp-action="Details" asp-route-id="@item.BookId">Details</a></li>
                        @if (UserManager.GetUserId(User) == item.OwnerId)
                        {
                            <li><a asp-action="Edit" asp-route-id="@item.BookId">Edit</a></li>
                        }
                        else if (item.IsAvailable)
                        {
                            var rowData = new Dictionary<string, string>();
                            rowData.Add("BookId", item.BookId.ToString());
                            rowData.Add("Title", item.Title);
                            rowData.Add("OwnerId", item.OwnerId );
                            rowData.Add("OwnerName", item.Owner.FullName);
                            <li><a asp-controller="ExchangeRequests" asp-action="ERequest" asp-all-route-data="rowData">Exchange</a></li>
                        }
                        @if (UserManager.GetUserId(User) == item.OwnerId)
                        {
                            <li><a asp-action="Delete" asp-route-id="@item.BookId">Delete</a></li>
                        }
                    </ul>
                </td>
            </tr>
        }
    </tbody>
</table>
<div id="pagination" class="mt-3">
    <!-- Pagination controls will appear here -->
</div>

<script>
    const currentUserId = '@UserManager.GetUserId(User)';
    const rowsPerPage = 6; // Number of rows per page
    let currentPage = 1; // Current page

    function filterBooks() {
        const searchInput = document.getElementById("searchBar").value.toLowerCase();
        const showOnlyCurrentUser = document.getElementById("userFilterCheckbox").checked;
        const notShowCurrentUser = document.getElementById("userFilterCheckbox1").checked;

        const table = document.getElementById("booksTable");
        const allRows = Array.from(table.querySelectorAll("tbody tr"));
        const filteredRows = []; 

        // Loop through all rows to apply filters
        allRows.forEach((row) => 
        {
            const cells = row.getElementsByTagName("td");
            let matchFound = false;
            const userIdCell = cells[cells.length - 2]; // UserId is the second last column
            let myflag = false;

            if (showOnlyCurrentUser) 
            {
                if (userIdCell.textContent.indexOf(currentUserId) > -1)
                {
                    for (let j = 0; j < cells.length - 1; j++) 
                    {
                        if (cells[j] && cells[j].innerText.toLowerCase().includes(searchInput)) 
                        {
                            matchFound = true;
                            break;
                        }
                    }
                }
            }
            else if (notShowCurrentUser) 
            {
                if (userIdCell.textContent.indexOf(currentUserId) === -1)
                {
                    for (let j = 0; j < cells.length - 1; j++) 
                    {
                        if (cells[j] && cells[j].innerText.toLowerCase().includes(searchInput)) 
                        {
                            matchFound = true;
                            break;
                        }
                    }
                }
            }
            else 
            {
                for (let j = 0; j < cells.length - 1; j++) 
                {
                    if (cells[j] && cells[j].innerText.toLowerCase().includes(searchInput)) 
                    {
                        matchFound = true;
                        break;
                    }
                }
            }

            if (matchFound) {
                filteredRows.push(row);
            }
        });

        // Display the filtered rows with pagination
        displayRowsWithPagination(filteredRows);
    }

    function displayRowsWithPagination(filteredRows) {
        const table = document.getElementById("booksTable");
        const allRows = Array.from(table.querySelectorAll("tbody tr")); // Select all rows from tbody

        // Hide all rows
        allRows.forEach((row) => (row.style.display = "none"));

        // Calculate start and end indices for the current page
        const startIndex = (currentPage - 1) * rowsPerPage;
        const endIndex = Math.min(startIndex + rowsPerPage, filteredRows.length);

        // Show only rows for the current page
        for (let i = startIndex; i < endIndex; i++) {
            filteredRows[i].style.display = "";
        }

        // Update pagination controls
        updatePaginationControls(filteredRows.length);
    }

    function updatePaginationControls(totalRows) {
        const paginationDiv = document.getElementById("pagination");
        paginationDiv.innerHTML = ""; // Clear current pagination controls

        const totalPages = Math.ceil(totalRows / rowsPerPage);

        // Generate pagination buttons
        for (let i = 1; i <= totalPages; i++) {
            const button = document.createElement("button");
            button.textContent = i;
            button.className = `btn ${i === currentPage ? "btn-primary" : "btn-secondary"} mx-1`;
            button.onclick = () => {
                currentPage = i;
                filterBooks(); // Reapply the filter on page change
            };
            paginationDiv.appendChild(button);
        }
    }

    // Initialize with the first page
    document.addEventListener("DOMContentLoaded", () => {
        currentPage = 1; // Reset to the first page on load
        filterBooks(); // Apply initial filter
    });



</script>
